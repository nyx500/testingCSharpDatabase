// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestingSQLRelationships.Data;

#nullable disable

namespace TestingSQLRelationships.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230202201735_PleaseWorkPleaseWorkPleaseWork2")]
    partial class PleaseWorkPleaseWorkPleaseWork2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TestingSQLRelationships.Models.CSInterest", b =>
                {
                    b.Property<int>("CSInterestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CSInterestId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CSInterestId");

                    b.ToTable("CSInterest");

                    b.HasData(
                        new
                        {
                            CSInterestId = 1,
                            Name = "Artificial_Intelligence"
                        },
                        new
                        {
                            CSInterestId = 2,
                            Name = "Cybersecurity"
                        },
                        new
                        {
                            CSInterestId = 3,
                            Name = "Database_Technology"
                        },
                        new
                        {
                            CSInterestId = 4,
                            Name = "Fintech"
                        },
                        new
                        {
                            CSInterestId = 5,
                            Name = "Games_Development"
                        },
                        new
                        {
                            CSInterestId = 6,
                            Name = "Graphics_Programming"
                        },
                        new
                        {
                            CSInterestId = 7,
                            Name = "Intelligent_Signal_Processing"
                        },
                        new
                        {
                            CSInterestId = 8,
                            Name = "Internet_of_Things"
                        },
                        new
                        {
                            CSInterestId = 9,
                            Name = "Machine_Learning"
                        },
                        new
                        {
                            CSInterestId = 10,
                            Name = "Mobile_Development"
                        },
                        new
                        {
                            CSInterestId = 11,
                            Name = "Neural_Networks"
                        },
                        new
                        {
                            CSInterestId = 12,
                            Name = "Natural_Language_Processing"
                        },
                        new
                        {
                            CSInterestId = 13,
                            Name = "Theoretical_Computer_Science"
                        },
                        new
                        {
                            CSInterestId = 14,
                            Name = "Web_Development"
                        },
                        new
                        {
                            CSInterestId = 15,
                            Name = "User_Experience"
                        },
                        new
                        {
                            CSInterestId = 16,
                            Name = "Virtual_Reality"
                        });
                });

            modelBuilder.Entity("TestingSQLRelationships.Models.CSInterestUser", b =>
                {
                    b.Property<string>("SlackId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("SlackId");

                    b.Property<int>("CSInterestId")
                        .HasColumnType("int");

                    b.HasKey("SlackId", "CSInterestId");

                    b.HasIndex("CSInterestId");

                    b.ToTable("CSInterestUser");

                    b.HasData(
                        new
                        {
                            SlackId = "U73VQP71",
                            CSInterestId = 1
                        },
                        new
                        {
                            SlackId = "U73VQP71",
                            CSInterestId = 2
                        },
                        new
                        {
                            SlackId = "U73VQP71",
                            CSInterestId = 3
                        });
                });

            modelBuilder.Entity("TestingSQLRelationships.Models.CareerPhase", b =>
                {
                    b.Property<int>("CareerPhaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CareerPhaseId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CareerPhaseId");

                    b.ToTable("CareerPhase");

                    b.HasData(
                        new
                        {
                            CareerPhaseId = 1,
                            Name = "Starter"
                        },
                        new
                        {
                            CareerPhaseId = 2,
                            Name = "Changer"
                        },
                        new
                        {
                            CareerPhaseId = 3,
                            Name = "Developer"
                        });
                });

            modelBuilder.Entity("TestingSQLRelationships.Models.ExperienceLevel", b =>
                {
                    b.Property<int>("ExperienceLevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExperienceLevelId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ExperienceLevelId");

                    b.ToTable("ExperienceLevel");

                    b.HasData(
                        new
                        {
                            ExperienceLevelId = 1,
                            Name = "Beginner"
                        },
                        new
                        {
                            ExperienceLevelId = 2,
                            Name = "Novice"
                        },
                        new
                        {
                            ExperienceLevelId = 3,
                            Name = "Intermediate"
                        },
                        new
                        {
                            ExperienceLevelId = 4,
                            Name = "Advanced"
                        },
                        new
                        {
                            ExperienceLevelId = 5,
                            Name = "Expert"
                        });
                });

            modelBuilder.Entity("TestingSQLRelationships.Models.Gender", b =>
                {
                    b.Property<int>("GenderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenderId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GenderId");

                    b.ToTable("Gender");

                    b.HasData(
                        new
                        {
                            GenderId = 1,
                            Name = "Male"
                        },
                        new
                        {
                            GenderId = 2,
                            Name = "Female"
                        },
                        new
                        {
                            GenderId = 3,
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("TestingSQLRelationships.Models.Hobby", b =>
                {
                    b.Property<int>("HobbyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HobbyId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HobbyId");

                    b.ToTable("Hobby");

                    b.HasData(
                        new
                        {
                            HobbyId = 1,
                            Name = "Acting"
                        },
                        new
                        {
                            HobbyId = 2,
                            Name = "Adventure_Sports"
                        },
                        new
                        {
                            HobbyId = 3,
                            Name = "Anime"
                        },
                        new
                        {
                            HobbyId = 4,
                            Name = "Archery"
                        },
                        new
                        {
                            HobbyId = 5,
                            Name = "Art"
                        },
                        new
                        {
                            HobbyId = 6,
                            Name = "Astrology"
                        },
                        new
                        {
                            HobbyId = 7,
                            Name = "Astronomy"
                        },
                        new
                        {
                            HobbyId = 8,
                            Name = "Baseball"
                        },
                        new
                        {
                            HobbyId = 9,
                            Name = "Basketball"
                        },
                        new
                        {
                            HobbyId = 10,
                            Name = "Biking"
                        },
                        new
                        {
                            HobbyId = 11,
                            Name = "Blogging"
                        },
                        new
                        {
                            HobbyId = 12,
                            Name = "Board_Games"
                        },
                        new
                        {
                            HobbyId = 13,
                            Name = "Card_Games"
                        },
                        new
                        {
                            HobbyId = 14,
                            Name = "Cars"
                        },
                        new
                        {
                            HobbyId = 15,
                            Name = "Chess"
                        },
                        new
                        {
                            HobbyId = 16,
                            Name = "Cinema"
                        },
                        new
                        {
                            HobbyId = 17,
                            Name = "Classical_Music"
                        },
                        new
                        {
                            HobbyId = 18,
                            Name = "Comics"
                        },
                        new
                        {
                            HobbyId = 19,
                            Name = "Concerts"
                        },
                        new
                        {
                            HobbyId = 20,
                            Name = "Cooking"
                        },
                        new
                        {
                            HobbyId = 21,
                            Name = "Cosplaying"
                        },
                        new
                        {
                            HobbyId = 22,
                            Name = "Crafts"
                        },
                        new
                        {
                            HobbyId = 23,
                            Name = "Creative_Writing"
                        },
                        new
                        {
                            HobbyId = 24,
                            Name = "Cycling"
                        },
                        new
                        {
                            HobbyId = 25,
                            Name = "Digital_Art"
                        },
                        new
                        {
                            HobbyId = 26,
                            Name = "DIY"
                        },
                        new
                        {
                            HobbyId = 27,
                            Name = "DJing"
                        },
                        new
                        {
                            HobbyId = 28,
                            Name = "Drawing"
                        },
                        new
                        {
                            HobbyId = 29,
                            Name = "Economics"
                        },
                        new
                        {
                            HobbyId = 30,
                            Name = "Electronic_Music"
                        },
                        new
                        {
                            HobbyId = 31,
                            Name = "Entrepreneurship"
                        },
                        new
                        {
                            HobbyId = 32,
                            Name = "Fashion"
                        },
                        new
                        {
                            HobbyId = 33,
                            Name = "Fiction"
                        },
                        new
                        {
                            HobbyId = 34,
                            Name = "Filmmaking"
                        },
                        new
                        {
                            HobbyId = 35,
                            Name = "Fitness"
                        },
                        new
                        {
                            HobbyId = 36,
                            Name = "Folk_Music"
                        },
                        new
                        {
                            HobbyId = 37,
                            Name = "Football"
                        },
                        new
                        {
                            HobbyId = 38,
                            Name = "Golf"
                        },
                        new
                        {
                            HobbyId = 39,
                            Name = "Handball"
                        },
                        new
                        {
                            HobbyId = 40,
                            Name = "Hiking"
                        },
                        new
                        {
                            HobbyId = 41,
                            Name = "History"
                        },
                        new
                        {
                            HobbyId = 42,
                            Name = "Hockey"
                        },
                        new
                        {
                            HobbyId = 43,
                            Name = "Horseback_Riding"
                        },
                        new
                        {
                            HobbyId = 44,
                            Name = "Jazz"
                        },
                        new
                        {
                            HobbyId = 45,
                            Name = "Learning_Languages"
                        },
                        new
                        {
                            HobbyId = 46,
                            Name = "Mathematics"
                        },
                        new
                        {
                            HobbyId = 47,
                            Name = "Martial_Arts"
                        },
                        new
                        {
                            HobbyId = 48,
                            Name = "Metal"
                        },
                        new
                        {
                            HobbyId = 49,
                            Name = "Music"
                        },
                        new
                        {
                            HobbyId = 50,
                            Name = "Musicals"
                        },
                        new
                        {
                            HobbyId = 51,
                            Name = "Music_Production"
                        },
                        new
                        {
                            HobbyId = 52,
                            Name = "Non_Fiction"
                        },
                        new
                        {
                            HobbyId = 53,
                            Name = "Opera"
                        },
                        new
                        {
                            HobbyId = 54,
                            Name = "Painting"
                        },
                        new
                        {
                            HobbyId = 55,
                            Name = "Pets"
                        },
                        new
                        {
                            HobbyId = 56,
                            Name = "Philosophy"
                        },
                        new
                        {
                            HobbyId = 57,
                            Name = "Photography"
                        },
                        new
                        {
                            HobbyId = 58,
                            Name = "Playing_An_Instrument"
                        },
                        new
                        {
                            HobbyId = 59,
                            Name = "Politics"
                        },
                        new
                        {
                            HobbyId = 60,
                            Name = "Pop_Music"
                        },
                        new
                        {
                            HobbyId = 61,
                            Name = "Reading"
                        },
                        new
                        {
                            HobbyId = 62,
                            Name = "Restaurants"
                        },
                        new
                        {
                            HobbyId = 63,
                            Name = "Rock_Music"
                        },
                        new
                        {
                            HobbyId = 64,
                            Name = "Rugby"
                        },
                        new
                        {
                            HobbyId = 65,
                            Name = "Running"
                        },
                        new
                        {
                            HobbyId = 66,
                            Name = "Sailing"
                        },
                        new
                        {
                            HobbyId = 67,
                            Name = "Sculpting"
                        },
                        new
                        {
                            HobbyId = 68,
                            Name = "Sewing"
                        },
                        new
                        {
                            HobbyId = 69,
                            Name = "Shopping"
                        },
                        new
                        {
                            HobbyId = 70,
                            Name = "Skiing"
                        },
                        new
                        {
                            HobbyId = 71,
                            Name = "Snow_Sports"
                        },
                        new
                        {
                            HobbyId = 72,
                            Name = "Street_Art"
                        },
                        new
                        {
                            HobbyId = 73,
                            Name = "Swimming"
                        },
                        new
                        {
                            HobbyId = 74,
                            Name = "Tennis"
                        },
                        new
                        {
                            HobbyId = 75,
                            Name = "Theatre"
                        },
                        new
                        {
                            HobbyId = 76,
                            Name = "Travel"
                        },
                        new
                        {
                            HobbyId = 77,
                            Name = "Video_Games"
                        },
                        new
                        {
                            HobbyId = 78,
                            Name = "Volunteering"
                        },
                        new
                        {
                            HobbyId = 79,
                            Name = "Walking"
                        },
                        new
                        {
                            HobbyId = 80,
                            Name = "Water_Sports"
                        },
                        new
                        {
                            HobbyId = 81,
                            Name = "Yoga"
                        });
                });

            modelBuilder.Entity("TestingSQLRelationships.Models.HobbyUser", b =>
                {
                    b.Property<string>("SlackId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("SlackId");

                    b.Property<int>("HobbyId")
                        .HasColumnType("int");

                    b.HasKey("SlackId", "HobbyId");

                    b.HasIndex("HobbyId");

                    b.ToTable("HobbyUser");

                    b.HasData(
                        new
                        {
                            SlackId = "U73VQP71",
                            HobbyId = 10
                        },
                        new
                        {
                            SlackId = "U73VQP71",
                            HobbyId = 21
                        },
                        new
                        {
                            SlackId = "U73VQP71",
                            HobbyId = 43
                        });
                });

            modelBuilder.Entity("TestingSQLRelationships.Models.Likes", b =>
                {
                    b.Property<string>("SlackId1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SlackId2")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SlackId1", "SlackId2");

                    b.HasIndex("SlackId2");

                    b.ToTable("Likes");

                    b.HasData(
                        new
                        {
                            SlackId1 = "U73VQP71",
                            SlackId2 = "8UJBW6F3"
                        });
                });

            modelBuilder.Entity("TestingSQLRelationships.Models.NaturalLanguage", b =>
                {
                    b.Property<int>("NaturalLanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NaturalLanguageId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NaturalLanguageId");

                    b.ToTable("NaturalLanguages");

                    b.HasData(
                        new
                        {
                            NaturalLanguageId = 1,
                            Name = "Akan"
                        },
                        new
                        {
                            NaturalLanguageId = 2,
                            Name = "Amharic"
                        },
                        new
                        {
                            NaturalLanguageId = 3,
                            Name = "Arabic"
                        },
                        new
                        {
                            NaturalLanguageId = 4,
                            Name = "Assamese"
                        },
                        new
                        {
                            NaturalLanguageId = 5,
                            Name = "Awadhi"
                        },
                        new
                        {
                            NaturalLanguageId = 6,
                            Name = "Azerbaijani"
                        },
                        new
                        {
                            NaturalLanguageId = 7,
                            Name = "Balochi"
                        },
                        new
                        {
                            NaturalLanguageId = 8,
                            Name = "Belarusian"
                        },
                        new
                        {
                            NaturalLanguageId = 9,
                            Name = "Bengali"
                        },
                        new
                        {
                            NaturalLanguageId = 10,
                            Name = "Bhojpuri"
                        },
                        new
                        {
                            NaturalLanguageId = 11,
                            Name = "Burmese"
                        },
                        new
                        {
                            NaturalLanguageId = 12,
                            Name = "Cebuano"
                        },
                        new
                        {
                            NaturalLanguageId = 13,
                            Name = "Chewa"
                        },
                        new
                        {
                            NaturalLanguageId = 14,
                            Name = "Chhattisgarhi"
                        },
                        new
                        {
                            NaturalLanguageId = 15,
                            Name = "Chittagonian"
                        },
                        new
                        {
                            NaturalLanguageId = 16,
                            Name = "Czech"
                        },
                        new
                        {
                            NaturalLanguageId = 17,
                            Name = "Deccan"
                        },
                        new
                        {
                            NaturalLanguageId = 18,
                            Name = "Dhundhari"
                        },
                        new
                        {
                            NaturalLanguageId = 19,
                            Name = "Dutch"
                        },
                        new
                        {
                            NaturalLanguageId = 20,
                            Name = "Eastern_Min"
                        },
                        new
                        {
                            NaturalLanguageId = 21,
                            Name = "English"
                        },
                        new
                        {
                            NaturalLanguageId = 22,
                            Name = "French"
                        },
                        new
                        {
                            NaturalLanguageId = 23,
                            Name = "Fula"
                        },
                        new
                        {
                            NaturalLanguageId = 24,
                            Name = "Gan_Chinese"
                        },
                        new
                        {
                            NaturalLanguageId = 25,
                            Name = "German"
                        },
                        new
                        {
                            NaturalLanguageId = 26,
                            Name = "Greek"
                        },
                        new
                        {
                            NaturalLanguageId = 27,
                            Name = "Gujarati"
                        },
                        new
                        {
                            NaturalLanguageId = 28,
                            Name = "Haitian_Creole"
                        },
                        new
                        {
                            NaturalLanguageId = 29,
                            Name = "Hakka"
                        },
                        new
                        {
                            NaturalLanguageId = 30,
                            Name = "Haryanvi"
                        },
                        new
                        {
                            NaturalLanguageId = 31,
                            Name = "Hausa"
                        },
                        new
                        {
                            NaturalLanguageId = 32,
                            Name = "Hiligaynon"
                        },
                        new
                        {
                            NaturalLanguageId = 33,
                            Name = "Hindi"
                        },
                        new
                        {
                            NaturalLanguageId = 34,
                            Name = "Hmong"
                        },
                        new
                        {
                            NaturalLanguageId = 35,
                            Name = "Hungarian"
                        },
                        new
                        {
                            NaturalLanguageId = 36,
                            Name = "Igbo"
                        },
                        new
                        {
                            NaturalLanguageId = 37,
                            Name = "Ilocano"
                        },
                        new
                        {
                            NaturalLanguageId = 38,
                            Name = "Italian"
                        },
                        new
                        {
                            NaturalLanguageId = 39,
                            Name = "Japanese"
                        },
                        new
                        {
                            NaturalLanguageId = 40,
                            Name = "Javanese"
                        },
                        new
                        {
                            NaturalLanguageId = 41,
                            Name = "Jin"
                        },
                        new
                        {
                            NaturalLanguageId = 42,
                            Name = "Kannada"
                        },
                        new
                        {
                            NaturalLanguageId = 43,
                            Name = "Kazakh"
                        },
                        new
                        {
                            NaturalLanguageId = 44,
                            Name = "Khmer"
                        },
                        new
                        {
                            NaturalLanguageId = 45,
                            Name = "Kinyarwanda"
                        },
                        new
                        {
                            NaturalLanguageId = 46,
                            Name = "Kirundi"
                        },
                        new
                        {
                            NaturalLanguageId = 47,
                            Name = "Konkani"
                        },
                        new
                        {
                            NaturalLanguageId = 48,
                            Name = "Korean"
                        },
                        new
                        {
                            NaturalLanguageId = 49,
                            Name = "Kurdish"
                        },
                        new
                        {
                            NaturalLanguageId = 50,
                            Name = "Madurese"
                        },
                        new
                        {
                            NaturalLanguageId = 51,
                            Name = "Magahi"
                        },
                        new
                        {
                            NaturalLanguageId = 52,
                            Name = "Maithili"
                        },
                        new
                        {
                            NaturalLanguageId = 53,
                            Name = "Malagasy"
                        },
                        new
                        {
                            NaturalLanguageId = 54,
                            Name = "Malay_Indonesian"
                        },
                        new
                        {
                            NaturalLanguageId = 55,
                            Name = "Malayalam"
                        },
                        new
                        {
                            NaturalLanguageId = 56,
                            Name = "Mandarin"
                        },
                        new
                        {
                            NaturalLanguageId = 57,
                            Name = "Marathi"
                        },
                        new
                        {
                            NaturalLanguageId = 58,
                            Name = "Marwari"
                        },
                        new
                        {
                            NaturalLanguageId = 59,
                            Name = "Mossi"
                        },
                        new
                        {
                            NaturalLanguageId = 60,
                            Name = "Nepali"
                        },
                        new
                        {
                            NaturalLanguageId = 61,
                            Name = "Northern_Min"
                        },
                        new
                        {
                            NaturalLanguageId = 62,
                            Name = "Odia_Oriya"
                        },
                        new
                        {
                            NaturalLanguageId = 63,
                            Name = "Oromo"
                        },
                        new
                        {
                            NaturalLanguageId = 64,
                            Name = "Pashto"
                        },
                        new
                        {
                            NaturalLanguageId = 65,
                            Name = "Persian"
                        },
                        new
                        {
                            NaturalLanguageId = 66,
                            Name = "Polish"
                        },
                        new
                        {
                            NaturalLanguageId = 67,
                            Name = "Portuguese"
                        },
                        new
                        {
                            NaturalLanguageId = 68,
                            Name = "Punjabi"
                        },
                        new
                        {
                            NaturalLanguageId = 69,
                            Name = "Quechua"
                        },
                        new
                        {
                            NaturalLanguageId = 70,
                            Name = "Romanian"
                        },
                        new
                        {
                            NaturalLanguageId = 71,
                            Name = "Russian"
                        },
                        new
                        {
                            NaturalLanguageId = 72,
                            Name = "Saraiki"
                        },
                        new
                        {
                            NaturalLanguageId = 73,
                            Name = "Serbo_Croatian"
                        },
                        new
                        {
                            NaturalLanguageId = 74,
                            Name = "Shona"
                        },
                        new
                        {
                            NaturalLanguageId = 75,
                            Name = "Sindhi"
                        },
                        new
                        {
                            NaturalLanguageId = 76,
                            Name = "Sinhalese"
                        },
                        new
                        {
                            NaturalLanguageId = 77,
                            Name = "Somali"
                        },
                        new
                        {
                            NaturalLanguageId = 78,
                            Name = "Southern_Min"
                        },
                        new
                        {
                            NaturalLanguageId = 79,
                            Name = "Spanish"
                        },
                        new
                        {
                            NaturalLanguageId = 80,
                            Name = "Sundanese"
                        },
                        new
                        {
                            NaturalLanguageId = 81,
                            Name = "Swedish"
                        },
                        new
                        {
                            NaturalLanguageId = 82,
                            Name = "Sylheti"
                        },
                        new
                        {
                            NaturalLanguageId = 83,
                            Name = "Tagalog"
                        },
                        new
                        {
                            NaturalLanguageId = 84,
                            Name = "Tamil"
                        },
                        new
                        {
                            NaturalLanguageId = 85,
                            Name = "Telugu"
                        },
                        new
                        {
                            NaturalLanguageId = 86,
                            Name = "Thai"
                        },
                        new
                        {
                            NaturalLanguageId = 87,
                            Name = "Turkish"
                        },
                        new
                        {
                            NaturalLanguageId = 88,
                            Name = "Turkmen"
                        },
                        new
                        {
                            NaturalLanguageId = 89,
                            Name = "Ukrainian"
                        },
                        new
                        {
                            NaturalLanguageId = 90,
                            Name = "Urdu"
                        },
                        new
                        {
                            NaturalLanguageId = 91,
                            Name = "Uyghur"
                        },
                        new
                        {
                            NaturalLanguageId = 92,
                            Name = "Uzbek"
                        },
                        new
                        {
                            NaturalLanguageId = 93,
                            Name = "Vietnamese"
                        },
                        new
                        {
                            NaturalLanguageId = 94,
                            Name = "Wu_inc_Shanghainese"
                        },
                        new
                        {
                            NaturalLanguageId = 95,
                            Name = "Xhosa"
                        },
                        new
                        {
                            NaturalLanguageId = 96,
                            Name = "Xiang_Hunnanese"
                        },
                        new
                        {
                            NaturalLanguageId = 97,
                            Name = "Yoruba"
                        },
                        new
                        {
                            NaturalLanguageId = 98,
                            Name = "Yue_Cantonese"
                        },
                        new
                        {
                            NaturalLanguageId = 99,
                            Name = "Zhuang"
                        },
                        new
                        {
                            NaturalLanguageId = 100,
                            Name = "Zulu"
                        });
                });

            modelBuilder.Entity("TestingSQLRelationships.Models.NaturalLanguageUser", b =>
                {
                    b.Property<string>("SlackId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("SlackId");

                    b.Property<int>("NaturalLanguageId")
                        .HasColumnType("int");

                    b.HasKey("SlackId", "NaturalLanguageId");

                    b.HasIndex("NaturalLanguageId");

                    b.ToTable("NaturalLanguageUser");

                    b.HasData(
                        new
                        {
                            SlackId = "U73VQP71",
                            NaturalLanguageId = 89
                        },
                        new
                        {
                            SlackId = "U73VQP71",
                            NaturalLanguageId = 28
                        },
                        new
                        {
                            SlackId = "U73VQP71",
                            NaturalLanguageId = 45
                        });
                });

            modelBuilder.Entity("TestingSQLRelationships.Models.ProgrammingLanguage", b =>
                {
                    b.Property<int>("ProgrammingLanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProgrammingLanguageId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProgrammingLanguageId");

                    b.ToTable("ProgrammingLanguages");

                    b.HasData(
                        new
                        {
                            ProgrammingLanguageId = 1,
                            Name = "Ada"
                        },
                        new
                        {
                            ProgrammingLanguageId = 2,
                            Name = "Assembly"
                        },
                        new
                        {
                            ProgrammingLanguageId = 3,
                            Name = "C"
                        },
                        new
                        {
                            ProgrammingLanguageId = 4,
                            Name = "COBOL"
                        },
                        new
                        {
                            ProgrammingLanguageId = 5,
                            Name = "CPlusPlus"
                        },
                        new
                        {
                            ProgrammingLanguageId = 6,
                            Name = "CSharp"
                        },
                        new
                        {
                            ProgrammingLanguageId = 7,
                            Name = "CSS"
                        },
                        new
                        {
                            ProgrammingLanguageId = 8,
                            Name = "D"
                        },
                        new
                        {
                            ProgrammingLanguageId = 9,
                            Name = "Dart"
                        },
                        new
                        {
                            ProgrammingLanguageId = 10,
                            Name = "Erlang"
                        },
                        new
                        {
                            ProgrammingLanguageId = 11,
                            Name = "Fortran"
                        },
                        new
                        {
                            ProgrammingLanguageId = 12,
                            Name = "FSharp"
                        },
                        new
                        {
                            ProgrammingLanguageId = 13,
                            Name = "Go"
                        },
                        new
                        {
                            ProgrammingLanguageId = 14,
                            Name = "HTML"
                        },
                        new
                        {
                            ProgrammingLanguageId = 15,
                            Name = "Java"
                        },
                        new
                        {
                            ProgrammingLanguageId = 16,
                            Name = "JavaScript"
                        },
                        new
                        {
                            ProgrammingLanguageId = 17,
                            Name = "Julia"
                        },
                        new
                        {
                            ProgrammingLanguageId = 18,
                            Name = "Kotlin"
                        },
                        new
                        {
                            ProgrammingLanguageId = 19,
                            Name = "Lisp"
                        },
                        new
                        {
                            ProgrammingLanguageId = 20,
                            Name = "Lua"
                        },
                        new
                        {
                            ProgrammingLanguageId = 21,
                            Name = "ObjectiveC"
                        },
                        new
                        {
                            ProgrammingLanguageId = 22,
                            Name = "Pascal"
                        },
                        new
                        {
                            ProgrammingLanguageId = 23,
                            Name = "Perl"
                        },
                        new
                        {
                            ProgrammingLanguageId = 24,
                            Name = "PHP"
                        },
                        new
                        {
                            ProgrammingLanguageId = 25,
                            Name = "Python"
                        },
                        new
                        {
                            ProgrammingLanguageId = 26,
                            Name = "Ruby"
                        },
                        new
                        {
                            ProgrammingLanguageId = 27,
                            Name = "Rust"
                        },
                        new
                        {
                            ProgrammingLanguageId = 28,
                            Name = "SQL"
                        },
                        new
                        {
                            ProgrammingLanguageId = 29,
                            Name = "Swift"
                        },
                        new
                        {
                            ProgrammingLanguageId = 30,
                            Name = "Typescript"
                        },
                        new
                        {
                            ProgrammingLanguageId = 31,
                            Name = "VisualBasic"
                        });
                });

            modelBuilder.Entity("TestingSQLRelationships.Models.ProgrammingLanguageUser", b =>
                {
                    b.Property<string>("SlackId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("SlackId");

                    b.Property<int>("ProgrammingLanguageId")
                        .HasColumnType("int");

                    b.HasKey("SlackId", "ProgrammingLanguageId");

                    b.HasIndex("ProgrammingLanguageId");

                    b.ToTable("ProgrammingLanguageUser");

                    b.HasData(
                        new
                        {
                            SlackId = "U73VQP71",
                            ProgrammingLanguageId = 3
                        },
                        new
                        {
                            SlackId = "U73VQP71",
                            ProgrammingLanguageId = 5
                        },
                        new
                        {
                            SlackId = "U73VQP71",
                            ProgrammingLanguageId = 6
                        });
                });

            modelBuilder.Entity("TestingSQLRelationships.Models.User", b =>
                {
                    b.Property<string>("SlackId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CareerPhaseId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("ExperienceLevelId")
                        .HasColumnType("int");

                    b.Property<int>("GenderId")
                        .HasColumnType("int");

                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("SlackId")
                        .HasName("User_SlackId");

                    b.HasIndex("CareerPhaseId");

                    b.HasIndex("ExperienceLevelId");

                    b.HasIndex("GenderId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            SlackId = "U73VQP71",
                            AccessFailedCount = 0,
                            Bio = "Hello, my name is John. I am interested in AI.",
                            CareerPhaseId = 2,
                            ConcurrencyStamp = "7fb16fa5-207b-4787-bf5b-f2f65b879455",
                            EmailConfirmed = false,
                            ExperienceLevelId = 2,
                            GenderId = 1,
                            Id = "706ea079-c50f-42a9-b0cd-efc62f9bcbe1",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dae4b998-33c4-42e9-b3d7-d4e54bc512a3",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            SlackId = "8UJBW6F3",
                            AccessFailedCount = 0,
                            Bio = "Hello, my name is Amanda. I am interested in VR.",
                            CareerPhaseId = 1,
                            ConcurrencyStamp = "8ce36339-b4f9-4262-8e15-b8908802a749",
                            EmailConfirmed = false,
                            ExperienceLevelId = 2,
                            GenderId = 2,
                            Id = "8c088b78-1a32-403b-a0bd-b9664d436fbd",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0392a8ae-2e77-4253-b1d8-6d16d352573a",
                            TwoFactorEnabled = false
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TestingSQLRelationships.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TestingSQLRelationships.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestingSQLRelationships.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TestingSQLRelationships.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TestingSQLRelationships.Models.CSInterestUser", b =>
                {
                    b.HasOne("TestingSQLRelationships.Models.CSInterest", "CSInterest")
                        .WithMany("CSInterestUsers")
                        .HasForeignKey("CSInterestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestingSQLRelationships.Models.User", "User")
                        .WithMany("CSInterestUsers")
                        .HasForeignKey("SlackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CSInterest");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TestingSQLRelationships.Models.HobbyUser", b =>
                {
                    b.HasOne("TestingSQLRelationships.Models.Hobby", "Hobby")
                        .WithMany("HobbyUsers")
                        .HasForeignKey("HobbyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestingSQLRelationships.Models.User", "User")
                        .WithMany("HobbyUsers")
                        .HasForeignKey("SlackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hobby");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TestingSQLRelationships.Models.Likes", b =>
                {
                    b.HasOne("TestingSQLRelationships.Models.User", "User1")
                        .WithMany("UsersLiked")
                        .HasForeignKey("SlackId1")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TestingSQLRelationships.Models.User", "User2")
                        .WithMany("LikedBy")
                        .HasForeignKey("SlackId2")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User1");

                    b.Navigation("User2");
                });

            modelBuilder.Entity("TestingSQLRelationships.Models.NaturalLanguageUser", b =>
                {
                    b.HasOne("TestingSQLRelationships.Models.NaturalLanguage", "NaturalLanguage")
                        .WithMany("NaturalLanguageUsers")
                        .HasForeignKey("NaturalLanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestingSQLRelationships.Models.User", "User")
                        .WithMany("NaturalLanguageUsers")
                        .HasForeignKey("SlackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NaturalLanguage");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TestingSQLRelationships.Models.ProgrammingLanguageUser", b =>
                {
                    b.HasOne("TestingSQLRelationships.Models.ProgrammingLanguage", "ProgrammingLanguage")
                        .WithMany("ProgrammingLanguageUsers")
                        .HasForeignKey("ProgrammingLanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestingSQLRelationships.Models.User", "User")
                        .WithMany("ProgrammingLanguageUsers")
                        .HasForeignKey("SlackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProgrammingLanguage");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TestingSQLRelationships.Models.User", b =>
                {
                    b.HasOne("TestingSQLRelationships.Models.CareerPhase", "CareerPhase")
                        .WithMany("Users")
                        .HasForeignKey("CareerPhaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestingSQLRelationships.Models.ExperienceLevel", "ExperienceLevel")
                        .WithMany("Users")
                        .HasForeignKey("ExperienceLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestingSQLRelationships.Models.Gender", "Gender")
                        .WithMany("Users")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CareerPhase");

                    b.Navigation("ExperienceLevel");

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("TestingSQLRelationships.Models.CSInterest", b =>
                {
                    b.Navigation("CSInterestUsers");
                });

            modelBuilder.Entity("TestingSQLRelationships.Models.CareerPhase", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("TestingSQLRelationships.Models.ExperienceLevel", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("TestingSQLRelationships.Models.Gender", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("TestingSQLRelationships.Models.Hobby", b =>
                {
                    b.Navigation("HobbyUsers");
                });

            modelBuilder.Entity("TestingSQLRelationships.Models.NaturalLanguage", b =>
                {
                    b.Navigation("NaturalLanguageUsers");
                });

            modelBuilder.Entity("TestingSQLRelationships.Models.ProgrammingLanguage", b =>
                {
                    b.Navigation("ProgrammingLanguageUsers");
                });

            modelBuilder.Entity("TestingSQLRelationships.Models.User", b =>
                {
                    b.Navigation("CSInterestUsers");

                    b.Navigation("HobbyUsers");

                    b.Navigation("LikedBy");

                    b.Navigation("NaturalLanguageUsers");

                    b.Navigation("ProgrammingLanguageUsers");

                    b.Navigation("UsersLiked");
                });
#pragma warning restore 612, 618
        }
    }
}
