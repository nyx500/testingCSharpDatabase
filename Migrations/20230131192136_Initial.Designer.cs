// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestingSQLRelationships.Data;

#nullable disable

namespace TestingSQLRelationships.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230131192136_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TestingSQLRelationships.Models.NaturalLanguage", b =>
                {
                    b.Property<int>("NaturalLanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NaturalLanguageId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NaturalLanguageId");

                    b.ToTable("NaturalLanguages");

                    b.HasData(
                        new
                        {
                            NaturalLanguageId = 1,
                            Name = "Akan"
                        },
                        new
                        {
                            NaturalLanguageId = 2,
                            Name = "Amharic"
                        },
                        new
                        {
                            NaturalLanguageId = 3,
                            Name = "Arabic"
                        },
                        new
                        {
                            NaturalLanguageId = 4,
                            Name = "Assamese"
                        },
                        new
                        {
                            NaturalLanguageId = 5,
                            Name = "Awadhi"
                        },
                        new
                        {
                            NaturalLanguageId = 6,
                            Name = "Azerbaijani"
                        },
                        new
                        {
                            NaturalLanguageId = 7,
                            Name = "Balochi"
                        },
                        new
                        {
                            NaturalLanguageId = 8,
                            Name = "Belarusian"
                        },
                        new
                        {
                            NaturalLanguageId = 9,
                            Name = "Bengali"
                        },
                        new
                        {
                            NaturalLanguageId = 10,
                            Name = "Bhojpuri"
                        },
                        new
                        {
                            NaturalLanguageId = 11,
                            Name = "Burmese"
                        },
                        new
                        {
                            NaturalLanguageId = 12,
                            Name = "Cebuano"
                        },
                        new
                        {
                            NaturalLanguageId = 13,
                            Name = "Chewa"
                        },
                        new
                        {
                            NaturalLanguageId = 14,
                            Name = "Chhattisgarhi"
                        },
                        new
                        {
                            NaturalLanguageId = 15,
                            Name = "Chittagonian"
                        },
                        new
                        {
                            NaturalLanguageId = 16,
                            Name = "Czech"
                        },
                        new
                        {
                            NaturalLanguageId = 17,
                            Name = "Deccan"
                        },
                        new
                        {
                            NaturalLanguageId = 18,
                            Name = "Dhundhari"
                        },
                        new
                        {
                            NaturalLanguageId = 19,
                            Name = "Dutch"
                        },
                        new
                        {
                            NaturalLanguageId = 20,
                            Name = "Eastern_Min"
                        },
                        new
                        {
                            NaturalLanguageId = 21,
                            Name = "English"
                        },
                        new
                        {
                            NaturalLanguageId = 22,
                            Name = "French"
                        },
                        new
                        {
                            NaturalLanguageId = 23,
                            Name = "Fula"
                        },
                        new
                        {
                            NaturalLanguageId = 24,
                            Name = "Gan_Chinese"
                        },
                        new
                        {
                            NaturalLanguageId = 25,
                            Name = "German"
                        },
                        new
                        {
                            NaturalLanguageId = 26,
                            Name = "Greek"
                        },
                        new
                        {
                            NaturalLanguageId = 27,
                            Name = "Gujarati"
                        },
                        new
                        {
                            NaturalLanguageId = 28,
                            Name = "Haitian_Creole"
                        },
                        new
                        {
                            NaturalLanguageId = 29,
                            Name = "Hakka"
                        },
                        new
                        {
                            NaturalLanguageId = 30,
                            Name = "Haryanvi"
                        },
                        new
                        {
                            NaturalLanguageId = 31,
                            Name = "Hausa"
                        },
                        new
                        {
                            NaturalLanguageId = 32,
                            Name = "Hiligaynon"
                        },
                        new
                        {
                            NaturalLanguageId = 33,
                            Name = "Hindi"
                        },
                        new
                        {
                            NaturalLanguageId = 34,
                            Name = "Hmong"
                        },
                        new
                        {
                            NaturalLanguageId = 35,
                            Name = "Hungarian"
                        },
                        new
                        {
                            NaturalLanguageId = 36,
                            Name = "Igbo"
                        },
                        new
                        {
                            NaturalLanguageId = 37,
                            Name = "Ilocano"
                        },
                        new
                        {
                            NaturalLanguageId = 38,
                            Name = "Italian"
                        },
                        new
                        {
                            NaturalLanguageId = 39,
                            Name = "Japanese"
                        },
                        new
                        {
                            NaturalLanguageId = 40,
                            Name = "Javanese"
                        },
                        new
                        {
                            NaturalLanguageId = 41,
                            Name = "Jin"
                        },
                        new
                        {
                            NaturalLanguageId = 42,
                            Name = "Kannada"
                        },
                        new
                        {
                            NaturalLanguageId = 43,
                            Name = "Kazakh"
                        },
                        new
                        {
                            NaturalLanguageId = 44,
                            Name = "Khmer"
                        },
                        new
                        {
                            NaturalLanguageId = 45,
                            Name = "Kinyarwanda"
                        },
                        new
                        {
                            NaturalLanguageId = 46,
                            Name = "Kirundi"
                        },
                        new
                        {
                            NaturalLanguageId = 47,
                            Name = "Konkani"
                        },
                        new
                        {
                            NaturalLanguageId = 48,
                            Name = "Korean"
                        },
                        new
                        {
                            NaturalLanguageId = 49,
                            Name = "Kurdish"
                        },
                        new
                        {
                            NaturalLanguageId = 50,
                            Name = "Madurese"
                        },
                        new
                        {
                            NaturalLanguageId = 51,
                            Name = "Magahi"
                        },
                        new
                        {
                            NaturalLanguageId = 52,
                            Name = "Maithili"
                        },
                        new
                        {
                            NaturalLanguageId = 53,
                            Name = "Malagasy"
                        },
                        new
                        {
                            NaturalLanguageId = 54,
                            Name = "Malay_Indonesian"
                        },
                        new
                        {
                            NaturalLanguageId = 55,
                            Name = "Malayalam"
                        },
                        new
                        {
                            NaturalLanguageId = 56,
                            Name = "Mandarin"
                        },
                        new
                        {
                            NaturalLanguageId = 57,
                            Name = "Marathi"
                        },
                        new
                        {
                            NaturalLanguageId = 58,
                            Name = "Marwari"
                        },
                        new
                        {
                            NaturalLanguageId = 59,
                            Name = "Mossi"
                        },
                        new
                        {
                            NaturalLanguageId = 60,
                            Name = "Nepali"
                        },
                        new
                        {
                            NaturalLanguageId = 61,
                            Name = "Northern_Min"
                        },
                        new
                        {
                            NaturalLanguageId = 62,
                            Name = "Odia_Oriya"
                        },
                        new
                        {
                            NaturalLanguageId = 63,
                            Name = "Oromo"
                        },
                        new
                        {
                            NaturalLanguageId = 64,
                            Name = "Pashto"
                        },
                        new
                        {
                            NaturalLanguageId = 65,
                            Name = "Persian"
                        },
                        new
                        {
                            NaturalLanguageId = 66,
                            Name = "Polish"
                        },
                        new
                        {
                            NaturalLanguageId = 67,
                            Name = "Portuguese"
                        },
                        new
                        {
                            NaturalLanguageId = 68,
                            Name = "Punjabi"
                        },
                        new
                        {
                            NaturalLanguageId = 69,
                            Name = "Quechua"
                        },
                        new
                        {
                            NaturalLanguageId = 70,
                            Name = "Romanian"
                        },
                        new
                        {
                            NaturalLanguageId = 71,
                            Name = "Russian"
                        },
                        new
                        {
                            NaturalLanguageId = 72,
                            Name = "Saraiki"
                        },
                        new
                        {
                            NaturalLanguageId = 73,
                            Name = "Serbo_Croatian"
                        },
                        new
                        {
                            NaturalLanguageId = 74,
                            Name = "Shona"
                        },
                        new
                        {
                            NaturalLanguageId = 75,
                            Name = "Sindhi"
                        },
                        new
                        {
                            NaturalLanguageId = 76,
                            Name = "Sinhalese"
                        },
                        new
                        {
                            NaturalLanguageId = 77,
                            Name = "Somali"
                        },
                        new
                        {
                            NaturalLanguageId = 78,
                            Name = "Southern_Min"
                        },
                        new
                        {
                            NaturalLanguageId = 79,
                            Name = "Spanish"
                        },
                        new
                        {
                            NaturalLanguageId = 80,
                            Name = "Sundanese"
                        },
                        new
                        {
                            NaturalLanguageId = 81,
                            Name = "Swedish"
                        },
                        new
                        {
                            NaturalLanguageId = 82,
                            Name = "Sylheti"
                        },
                        new
                        {
                            NaturalLanguageId = 83,
                            Name = "Tagalog"
                        },
                        new
                        {
                            NaturalLanguageId = 84,
                            Name = "Tamil"
                        },
                        new
                        {
                            NaturalLanguageId = 85,
                            Name = "Telugu"
                        },
                        new
                        {
                            NaturalLanguageId = 86,
                            Name = "Thai"
                        },
                        new
                        {
                            NaturalLanguageId = 87,
                            Name = "Turkish"
                        },
                        new
                        {
                            NaturalLanguageId = 88,
                            Name = "Turkmen"
                        },
                        new
                        {
                            NaturalLanguageId = 89,
                            Name = "Ukrainian"
                        },
                        new
                        {
                            NaturalLanguageId = 90,
                            Name = "Urdu"
                        },
                        new
                        {
                            NaturalLanguageId = 91,
                            Name = "Uyghur"
                        },
                        new
                        {
                            NaturalLanguageId = 92,
                            Name = "Uzbek"
                        },
                        new
                        {
                            NaturalLanguageId = 93,
                            Name = "Vietnamese"
                        },
                        new
                        {
                            NaturalLanguageId = 94,
                            Name = "Wu_inc_Shanghainese"
                        },
                        new
                        {
                            NaturalLanguageId = 95,
                            Name = "Xhosa"
                        },
                        new
                        {
                            NaturalLanguageId = 96,
                            Name = "Xiang_Hunnanese"
                        },
                        new
                        {
                            NaturalLanguageId = 97,
                            Name = "Yoruba"
                        },
                        new
                        {
                            NaturalLanguageId = 98,
                            Name = "Yue_Cantonese"
                        },
                        new
                        {
                            NaturalLanguageId = 99,
                            Name = "Zhuang"
                        },
                        new
                        {
                            NaturalLanguageId = 100,
                            Name = "Zulu"
                        });
                });

            modelBuilder.Entity("TestingSQLRelationships.Models.NaturalLanguageUser", b =>
                {
                    b.Property<string>("SlackId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("SlackId");

                    b.Property<int>("NaturalLanguageId")
                        .HasColumnType("int");

                    b.HasKey("SlackId", "NaturalLanguageId");

                    b.HasIndex("NaturalLanguageId");

                    b.ToTable("NaturalLanguageUser");
                });

            modelBuilder.Entity("TestingSQLRelationships.Models.User", b =>
                {
                    b.Property<string>("SlackId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CareerPhase")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("ExperienceLevel")
                        .HasColumnType("int");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("SlackId")
                        .HasName("User_SlackId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            SlackId = "U73VQP71",
                            AccessFailedCount = 0,
                            Bio = "Hello, my name is John. I am interested in AI.",
                            CareerPhase = 2,
                            ConcurrencyStamp = "13124433-01ff-4ad9-b614-9d9ba06ed686",
                            EmailConfirmed = false,
                            ExperienceLevel = 2,
                            Gender = 0,
                            Id = "a264a41e-8873-4cf5-9dd4-7e57d4ba5ee8",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2c4597ce-aad5-4342-87fb-fcb5268f6d06",
                            TwoFactorEnabled = false
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TestingSQLRelationships.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TestingSQLRelationships.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestingSQLRelationships.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TestingSQLRelationships.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TestingSQLRelationships.Models.NaturalLanguageUser", b =>
                {
                    b.HasOne("TestingSQLRelationships.Models.NaturalLanguage", "NaturalLanguage")
                        .WithMany("NaturalLanguageUsers")
                        .HasForeignKey("NaturalLanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestingSQLRelationships.Models.User", "User")
                        .WithMany("NaturalLanguageUsers")
                        .HasForeignKey("SlackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NaturalLanguage");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TestingSQLRelationships.Models.NaturalLanguage", b =>
                {
                    b.Navigation("NaturalLanguageUsers");
                });

            modelBuilder.Entity("TestingSQLRelationships.Models.User", b =>
                {
                    b.Navigation("NaturalLanguageUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
